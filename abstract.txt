Introduction to functional programming in Haskell

Functional programming offers a powerful and practical alternative to the
ubiquitous object-oriented and procedural paradigms. Many programs and
algorithms may be expressed more clearly, concisely, and with less opportunity
for errors in functional languages versus the alternatives.

We will present the basic concepts underlying modern functional programming,
including first-class and higher-order functions, abstract data types,
parametric polymorphism, and type inference, in the context of the Haskell
programming language. Haskell is unique in its use of non-strict evaluation
semantics, which, along with a clever approach to state and side-effects, yields
programs that are highly composable as well as amenable to formal analysis.

No previous experience with Haskell or functional languages in general will be
assumed.

We will present working examples of Haskell code, and you may bring a laptop and
follow along if you wish. We will be using the Glasgow Haskell Compiler (GHC)
and its suite of associated tools. At the beginning of the talk I will briefly
describe how to obtain and install these tools, but if you want a head start go
to

  http://hackage.haskell.org/platform/

and install the "Haskell Platform" software found there.
